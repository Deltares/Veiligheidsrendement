import glob
from pathlib import Path
from shutil import copyfile

from tests import test_data, test_results
from tests.api_acceptance_cases.acceptance_test_case import AcceptanceTestCase


def update_reference_dbs():
    """
    Updates the reference databases in the test_data directory with the
    latest results from the test_results directory.

    Can be run with `poetry run update_reference_dbs`.

    Note this requires the test results to be generated first.
    The test results are generated by running the relevant acceptance tests
    in the `tests` directory:
        `poetry run pytest tests -v -m "regenerate_test_db" --no-skip`.
    Carefully inspect the results before updating the reference databases.
    """
    _test_results_dir = test_results.joinpath(
        "TestApiRunWorkflowsAcceptance", "test_run_full_to_generate_results"
    )

    print(f"UPDATING reference databases in {test_data}\n\tfrom {_test_results_dir}")

    # Loop over the cases
    for _case in AcceptanceTestCase.get_cases():

        # Find result directory
        _result_dir = _test_results_dir.joinpath(_case.model_directory)

        # Copy the result databases
        _result_dbs = glob.glob(str(_result_dir.joinpath("vrtool_result*.db")))
        if not _result_dbs:
            print(f"SKIPPING {_result_dir}\n\tNo result databases found.")
            continue

        for _result_db in _result_dbs:
            _result_db = Path(_result_db)
            _reference_db = test_data.joinpath(
                _case.model_directory,
                _result_db.name.replace("vrtool_result", "vrtool_input"),
            )
            if not _reference_db.is_file():
                print(
                    f"SKIPPING {_result_db}\n\tNo reference database found at: {_reference_db}"
                )
                continue

            # Check timestamp of the result database
            _result_db_timestamp = _result_db.stat().st_mtime
            _reference_db_timestamp = _reference_db.stat().st_mtime
            if _reference_db_timestamp >= _result_db_timestamp:
                print(
                    f"SKIPPING {_result_db}\n\tReference database is up to date: {_reference_db}"
                )
                continue

            # Copy the result database to the reference database
            _reference_db.unlink()
            copyfile(_result_db, _reference_db)
            print(f"UPDATING {_reference_db}\n\tfrom {_result_db}")
