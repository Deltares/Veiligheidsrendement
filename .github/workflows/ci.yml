name: ci-on-push-and-autoformat
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master
jobs:

  CI:
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.3.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Test with pytest
        run: |
          poetry run pytest --cov=koswat --cov-report xml:coverage-reports/coverage-koswat-src.xml --junitxml=xunit-reports/xunit-result-koswat-src.xml
          poetry run coverage xml -i

      - name: Autoformat code if the check fails
        if: ${{ (matrix.os == 'ubuntu-latest') && (matrix.python-version == 3.10) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
          poetry run isort .
          poetry run black .
          git config --global user.name '${{ github.actor }}'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "autoformat: isort & black" && git push || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: ${{ (matrix.os == 'ubuntu-latest') && (matrix.python-version == 3.10) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}